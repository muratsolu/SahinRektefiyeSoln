@model SahinRektefiyeSoln.Models.ViewModels.IsEmri.IsEmriOlusturPageModel

@{
	ViewBag.Title = "IsEmriOlustur";
	Layout = "~/Views/Shared/_Layout.cshtml";

	string MusteriDesc = string.Empty;

	if (Model.musteri != null)
	{
		MusteriDesc = Model.musteri.MusteriTipi == "B" ? (Model.musteri.MusteriAdi.ToString() + " " + Model.musteri.MusteriSoyadi.ToString()) : Model.musteri.KurumAdi.ToString();
	}

	List<int> ids = SahinRektefiyeSoln.Models.Parameters.ServiceIsEmriIds();

	string GunlukIsEmriIds = string.Join(",", ids.Select(n => n.ToString()).ToArray());

	MusteriDesc = SahinRektefiyeSoln.Helpers.RevmerHelper.TurkishCharacterToEnglish(MusteriDesc);

}
<link href="~/Styles/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.js"></script>
<link href="~/Scripts/DatetimePicker/jquery.datetimepicker.css" rel="stylesheet" />
@using Vereyon.Web;
@Html.Action("SetPageHeader", "Admin", new { pageTitle = "İş Emri Oluşturma Ekranı", pagePermission = "XXXXX" })
<script>
	$(document).ready(function () {

		var IsEmriGunlukIds = '@GunlukIsEmriIds';
		console.log(IsEmriGunlukIds);
		$.widget("custom.combobox", {
			_create: function () {
				this.wrapper = $("<span>")
					//.addClass("custom-combobox")
					.css({ 'position': 'relative' })
					.css({ 'width': "auto!important" })
					.insertAfter(this.element);

				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},

			_createAutocomplete: function () {
				var selected = this.element.children(":selected"),
					value = selected.val() ? selected.text() : "";

				this.input = $("<input>")
					.appendTo(this.wrapper)
					.val(value)
					.attr("title", "")
					//.addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
					.addClass("w3-select w3-border w3-round w3-padding")
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy(this, "_source")
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});

				if (this.bindings[0].getAttribute("required") == "required") {
					this.input.attr("required", "required");
				}

				this._on(this.input, {
					autocompleteselect: function (event, ui) {
						ui.item.option.selected = true;
						this._trigger("select", event, {
							item: ui.item.option
						});
					},

					autocompletechange: "_removeIfInvalid"
				});
			},

			_createShowAllButton: function () {
				var input = this.input,
					wasOpen = false;

				$("<a>")
					.attr("tabIndex", -1)
					.attr("title", "Tümünü Göster")
					.tooltip()
					.appendTo(this.wrapper)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.css('margin-right', 3)
					.removeClass("ui-button ui-corner-all ui-widget ui-button-icon-only ")
					//.addClass("custom-combobox-toggle ui-corner-right")
					.addClass("w3-display-right")
					.on("mousedown", function () {
						wasOpen = input.autocomplete("widget").is(":visible");
					})
					.on("click", function () {
						input.trigger("focus");

						// Close if already visible
						if (wasOpen) {
							return;
						}

						// Pass empty string as value to search for, displaying all results
						input.autocomplete("search", "");
					});
			},

			_source: function (request, response) {
				var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
				var i = 0;
				response(this.element.children("option").map(function () {
					var text = $(this).text();
					if (this.value && (!request.term || matcher.test(text))) {
						i += 1;
						if (i <= 5) {
							return {
								label: text,
								value: text,
								option: this
							};
						}

					}

				}));
			},

			_removeIfInvalid: function (event, ui) {

				// Selected an item, nothing to do
				if (ui.item) {
					return;
				}

				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children("option").each(function () {
					if ($(this).text().toLowerCase() === valueLowerCase) {
						this.selected = valid = true;
						return false;
					}
				});

				// Found a match, nothing to do
				if (valid) {
					return;
				}

				// Remove invalid value
				this.input
					.val("")
					.attr("title", value + " seçilmedi.")
					.tooltip("open");
				this.element.val("");
				this._delay(function () {
					this.input.tooltip("close").attr("title", "");
				}, 2500);
				this.input.autocomplete("instance").term = "";
			},

			_destroy: function () {
				this.wrapper.remove();
				this.element.show();
			}
		});

		$("#DanismanId").combobox({
			select: function (event, ui) {
				$('#DanismanId').val(ui.item.value);
				$('#DanismanId').trigger("change");
			}
		});


		var aracId = '@(Model.arac != null ? Model.arac.AracId : 0)';

		if (aracId != '0') {
			SetReadOnly('arac_Plaka');
			SetReadOnly('arac_SaseNo');
		}


		var musteriId = '@(Model.musteri != null ? Model.musteri.MusteriId : 0)';

		console.log('@MusteriDesc');

		if (musteriId != '0') {
			$('#btnMusteriSec').attr('disabled', 'disabled');

			$('#VehicleMusteriText').val('@(MusteriDesc)');
			$('#VehicleMusteriId').val(musteriId);

		}

		jQuery(document).ready(function () {
			'use strict';

			jQuery('#TahminiTeslimTarihi').datetimepicker(
				{
					 value: '@(Model.isEmri !=null ? Model.isEmri.TahminiTeslimTarihi.Value.Year +"/"+ Model.isEmri.TahminiTeslimTarihi.Value.Month+"/"+ Model.isEmri.TahminiTeslimTarihi.Value.Day +" "+ Model.isEmri.TahminiTeslimTarihi.Value.Hour+":"+Model.isEmri.TahminiTeslimTarihi.Value.Minute+"\'" : null)'
				});
		});

		SetReadOnly('VehicleMusteriText');

		$('#btnMusteriSec').click(function () {

			$('#MusteriModalContent').load('@Url.Action("HizliMusteriSec","Musteri")');

			document.getElementById('MusteriSecModal').style.display = 'block';

			return false;

		});

		$('#arac_Plaka').focusout(function () {

			var plaka = $('#arac_Plaka').val().toUpperCase();

			var url = '@Url.Action("CheckVehicle", "IsEmri")';

			$.getJSON(url, { plaka: plaka }, function (response) {
					console.log(response);
				if (response.result) {
					$('#arac_SaseNo').val('');
					$('#arac_SaseNo').val(response.SaseNo);
					$('#VehicleMusteriText').val(response.musteriHitap);
					$('#VehicleMusteriId').val(response.VehicleMusteriId);
					$('#Km').val(response.Km);
					$('#plakaMessage').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-check-circle-o fa-2x w3-medium" aria-hidden="true"  style="color:green" title="Araç sistemde kayıtlı."></i><label class="w3-text-green w3-small">Araç sistemde kayıtlı</label>');
					$('#SaseMessage').html('');
					$('#btnOlustur').removeAttr('disabled', 'disabled');
				} else {
					$('#plakaMessage').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-times-circle-o fa-2x w3-medium" aria-hidden="true" style="color:red" title="Aracı sisteme kaydedin.' + response.message +'"></i>');
					$('#arac_SaseNo').val('');
					$('#SaseMessage').html('');
					$('#VehicleMusteriText').val('');
					$('#VehicleMusteriId').val('');
					$('#Km').val(0);
					$('#btnOlustur').attr('disabled','disabled');
				}


				});
		});

		$('#arac_SaseNo').focusout(function () {

			var saseNo = $('#arac_SaseNo').val().toUpperCase();

			var url = '@Url.Action("CheckVehicleSaseNo", "IsEmri")';

			$.getJSON(url, { saseNo: saseNo }, function (response) {
					console.log(response);
				if (response.result) {
						$('#arac_Plaka').val('');
					$('#arac_Plaka').val(response.Plaka);
					$('#VehicleMusteriText').val(response.musteriHitap);
					$('#VehicleMusteriId').val(response.VehicleMusteriId);
					$('#Km').val(response.Km);
						$('#SaseMessage').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-check-circle-o fa-2x w3-medium" aria-hidden="true"  style="color:green" title="Araç sistemde kayıtlı."></i><label class="w3-text-green w3-small">Araç sistemde kayıtlı</label>');
						$('#plakaMessage').html('');
						$('#btnOlustur').removeAttr('disabled', 'disabled');
					} else {
					$('#SaseMessage').html('&nbsp;&nbsp;&nbsp;<i class="fa fa-times-circle-o fa-2x w3-medium" aria-hidden="true" style="color:red" title="Aracı sisteme kaydedin.' + response.message +'"></i>');
						$('#arac_Plaka').val('');
					$('#plakaMessage').html('');
					$('#VehicleMusteriText').val('');
					$('#VehicleMusteriId').val('');
					$('#Km').val(0);
						$('#btnOlustur').attr('disabled','disabled');
					}


				});
		});

	

	});

	String.prototype.turkishToUpper = function () {
		var string = this;
		var letters = { "i": "İ", "ş": "Ş", "ğ": "Ğ", "ü": "Ü", "ö": "Ö", "ç": "Ç", "ı": "I" };
		string = string.replace(/(([iışğüçö]))/g, function (letter) { return letters[letter]; })
		return string.toUpperCase();
	}

	String.prototype.turkishToLower = function () {
		var string = this;
		var letters = { "İ": "i", "I": "ı", "Ş": "ş", "Ğ": "ğ", "Ü": "ü", "Ö": "ö", "Ç": "ç" };
		string = string.replace(/(([İIŞĞÜÇÖ]))/g, function (letter) { return letters[letter]; })
		return string.toLowerCase();
	}

	function Utf8ArrayToStr(array) {
		var out, i, len, c;
		var char2, char3;

		out = "";
		len = array.length;
		i = 0;
		while (i < len) {
			c = array[i++];
			switch (c >> 4) {
				case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
					// 0xxxxxxx
					out += String.fromCharCode(c);
					break;
				case 12: case 13:
					// 110x xxxx   10xx xxxx
					char2 = array[i++];
					out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
					break;
				case 14:
					// 1110 xxxx  10xx xxxx  10xx xxxx
					char2 = array[i++];
					char3 = array[i++];
					out += String.fromCharCode(((c & 0x0F) << 12) |
						((char2 & 0x3F) << 6) |
						((char3 & 0x3F) << 0));
					break;
			}
		}

		return out;
	}
	function SetReadOnly(elementName) {
		document.getElementById(elementName).readOnly = true;
		document.getElementById(elementName).style.backgroundColor = "#ebebe4";
		document.getElementById(elementName).style.color = "#545454";

	}

	function onIsEmriChanged() {
		debugger;
		var IsEmriGunlukIds = '@GunlukIsEmriIds';
		var array = IsEmriGunlukIds.split(',');

		var value = $('#IsEmriTipId').val();
		if (array.includes(value)) {
			$('#GunlukIsEmriBilgileri').addClass("w3-show").removeClass("w3-hide");
		} else
		{
			$('#GunlukIsEmriBilgileri').addClass("w3-hide").removeClass("w3-show");
		}
	}

</script>
<div class="w3-panel">
	<div class="w3-row-padding w3-card">
		<div class="w3-row w3-row-padding  w3-margin-top">
			@Html.RenderFlashMessages()
		</div>
		@using (Html.BeginForm("IsEmriOlustur", "IsEmri", FormMethod.Post))
		{
			<div class="w3-row">
				<div class="w3-third w3-padding">
					<div class="w3-row">
						<label>İş Emri Tipi</label>
						@Html.DropDownList("IsEmriTipId", (SelectList)ViewBag.IsEmriTipleri, "İşçilik Emri Tipi Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "IsEmriTipId", required = "required" , @onchange = "onIsEmriChanged();" })
					</div>
					<div class="w3-row">
						<div class="w3-threequarter">
							<label>Müşteri (Cari)</label>
							<input type="text" class="w3-input w3-border w3-round" autocomplete="off" id="VehicleMusteriText" required />
							<input type="hidden" class="w3-input w3-border w3-round" autocomplete="off" id="VehicleMusteriId" name="VehicleMusteriId" />
						</div>
						<div class="w3-quarter">
							<br />
							<button class="btn-login w3-blue w3-btn  w3-block" id="btnMusteriSec" title="Müşteri Seç"><i class="fa fa-user-circle-o w3-small" aria-hidden="true"></i> Seç</button>
						</div>
					</div>
					<div class="w3-row w3-padding">
						<div class="w3-third">
							<label>Vip</label>
							@Html.CheckBoxFor(model => model.isEmri.SwVip, new { @class = "w3-check" })
						</div>
						<div class="w3-third">
							<label>İnteraktif?</label>
							@Html.CheckBoxFor(model => model.isEmri.SwInteraktif, new { @class = "w3-check" })
						</div>
						<div class="w3-third">
							<label>Tekrarlı İş?</label>
							@Html.CheckBoxFor(model => model.isEmri.SwTekrarlananIs, new { @class = "w3-check" })
						</div>
					</div>

				</div>
				<div class="w3-third w3-padding">
					@Html.HiddenFor(x => x.arac.AracId)
					<div class="w3-row">
						<div class="w3-half">
							<label>Plaka No</label><label id="plakaMessage"></label>
							@Html.EditorFor(model => model.arac.Plaka, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "16", autocomplete = "off" } })
						</div>
						<div class="w3-half w3-padding-left w3-medium"  >
							<br />
							<label>Araç Serviste Mi?</label>
							@Html.CheckBoxFor(model => model.SwAracInService, new { @class = "w3-check"})
						</div>
						
					</div>
					<div class="w3-row">
						<label>Şase No</label><label id="SaseMessage"></label>
						@Html.EditorFor(model => model.arac.SaseNo, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "17", autocomplete = "off" } })
					</div>
					<div class="w3-row w3-padding">
						<div class="w3-half">
							<label>Garanti varmı?</label>
							@Html.CheckBoxFor(model => model.isEmri.SwWarranty, new { @class = "w3-check" })
						</div>
						<div class="w3-half">
							<label>Önceden Revizyon yapılmış mı?</label>
							@Html.CheckBoxFor(model => model.isEmri.SwRevision, new { @class = "w3-check" })
						</div>
					</div>

				</div>
				<div class="w3-third w3-padding">
					<div class="w3-row">
						<label>Danışman</label>
						@Html.DropDownList("DanismanId", (SelectList)ViewBag.Danismanlar, "Danışman Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "DanismanId", required = "required" })
					</div>

					<div class="w3-row">
						<label>Tahmini Teslim Tarihi</label>
						@Html.EditorFor(model => model.isEmri.TahminiTeslimTarihi, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", id = "TahminiTeslimTarihi", autocomplete = "off" } })
					</div>
					<div class="w3-row">
						<label>Km</label>
						@Html.EditorFor(model => model.Km, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "17", autocomplete = "off" } })
					</div>
				</div>
			</div>
			<div class="w3-row">
				<div id="GunlukIsEmriBilgileri" class="w3-hide">
					<div class="w3-quarter w3-padding w3-left">
						<div class="w3-row">
							<label>Seri No</label><label id="seriNo"></label>
							@Html.EditorFor(model => model.isEmri.SerialNo, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "24", autocomplete = "off" } })
						</div>
					</div>
					<div class="w3-quarter w3-padding w3-left">
						<div class="w3-row">
							<label>Parça No</label><label id="seriNo"></label>
							@Html.EditorFor(model => model.isEmri.PartNo, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "24", autocomplete = "off" } })
						</div>
					</div>
				</div>
				
				<div class="w3-quarter w3-padding w3-right">
					<button class="w3-btn w3-ripple w3-green w3-right" type="submit" id="btnOlustur">Oluştur</button>
				</div>
			</div>
		}
	</div>
</div>

<div id="MusteriSecModal" class="w3-modal w3-animate-opacity">
	<div class="w3-modal-content w3-card-4">
		<header class="w3-container w3-teal">
			<span onclick="document.getElementById('MusteriSecModal').style.display = 'none';" class="w3-button w3-large w3-display-topright">&times;</span>
			<h5>Müşteri Seç</h5>
		</header>
		<div class="w3-container">
			<div class="w3-row w3-margin" id="MusteriModalContent">

			</div>
		</div>
	</div>
</div>



<script src="~/Scripts/DatetimePicker/jquery.datetimepicker.full.min.js"></script>
<script src="~/Scripts/DatetimePicker/bootstrap-datetimepicker.tr.js"></script>
