@model SahinRektefiyeSoln.Models.WorkOrders

@{
	ViewBag.Title = "İş Emri Oluştur";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Styles/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.js"></script>
<script>
	$(document).ready(function () {
		$('#btnSave').click(function () {
			var Company = $('#CompanyId').val();
			var Vehicle = $('#VehicleId').val();
			var Service = $('#ServiceId').val();
			var Task = $('#TasksId').val();
			if (Company == '' || Company == null) {
				alert('Firma bilgisi boş geçilemez.');
				return false;
			}
			if (Vehicle == '' || Vehicle == null) {
				alert('Model bilgisi boş geçilemez.');
				return false;
			}
			if (Service == '' || Service==null) {
				alert('Servis bilgisi boş geçilemez.');
				return false;
			}
			if (Task == '' || Task == null) {
				alert('İş tipi boş geçilemez.');
				return false;
			}
		});

		//** Custom AutoComp begin **//

		$.widget("custom.combobox", {
			_create: function () {
				this.wrapper = $("<span>")
					//.addClass("custom-combobox")
					.css({ 'position': 'relative' })
					.css({ 'width': "auto!important" })
					.insertAfter(this.element);

				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},

			_createAutocomplete: function () {
				var selected = this.element.children(":selected"),
					value = selected.val() ? selected.text() : "";

				this.input = $("<input>")
					.appendTo(this.wrapper)
					.val(value)
					.attr("title", "")
					//.addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
					.addClass("w3-select w3-border w3-round w3-padding")
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy(this, "_source")
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});

				this._on(this.input, {
					autocompleteselect: function (event, ui) {
						ui.item.option.selected = true;
						this._trigger("select", event, {
							item: ui.item.option
						});
					},

					autocompletechange: "_removeIfInvalid"
				});
			},

			_createShowAllButton: function () {
				var input = this.input,
					wasOpen = false;

				$("<a>")
					.attr("tabIndex", -1)
					.attr("title", "Tümünü Göster")
					.tooltip()
					.appendTo(this.wrapper)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.css('margin-right', 3)
					.removeClass("ui-button ui-corner-all ui-widget ui-button-icon-only ")
					//.addClass("custom-combobox-toggle ui-corner-right")
					.addClass("w3-display-right")
					.on("mousedown", function () {
						wasOpen = input.autocomplete("widget").is(":visible");
					})
					.on("click", function () {
						input.trigger("focus");

						// Close if already visible
						if (wasOpen) {
							return;
						}

						// Pass empty string as value to search for, displaying all results
						input.autocomplete("search", "");
					});
			},

			_source: function (request, response) {
				var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
				response(this.element.children("option").map(function () {
					var text = $(this).text();
					if (this.value && (!request.term || matcher.test(text)))
						return {
							label: text,
							value: text,
							option: this
						};
				}));
			},

			_removeIfInvalid: function (event, ui) {

				// Selected an item, nothing to do
				if (ui.item) {
					return;
				}

				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children("option").each(function () {
					if ($(this).text().toLowerCase() === valueLowerCase) {
						this.selected = valid = true;
						return false;
					}
				});

				// Found a match, nothing to do
				if (valid) {
					return;
				}

				// Remove invalid value
				this.input
					.val("")
					.attr("title", value + " seçilmedi.")
					.tooltip("open");
				this.element.val("");
				this._delay(function () {
					this.input.tooltip("close").attr("title", "");
				}, 2500);
				this.input.autocomplete("instance").term = "";
			},

			_destroy: function () {
				this.wrapper.remove();
				this.element.show();
			}
		});

		$("#ServiceId").combobox({
			select: function (event, ui) {
				//console.log(event);
				//console.log(ui.item.value);
				$('#ServiceId').val(ui.item.value);
				$('#ServiceId').trigger("change");
			}
		});
		$("#toggle").on("click", function () {
			$("#ServiceId").toggle();
		});

		$("#VehicleId").combobox({
			select: function (event, ui) {
				//console.log(event);
				//console.log(ui.item.value);
				$('#VehicleId').val(ui.item.value);
				$('#VehicleId').trigger("change");
			}
		});
		$("#toggle").on("click", function () {
			$("#VehicleId").toggle();
		});

		//** Custom AutoComp end **//

	});
</script>
<script>
function onChangeCompany()
{
    var url = '@Url.Action("Vehicles", "WorkOrder")';
    var PDD = $("#VehicleId");
    var ODD = $("#CompanyId").val();
	if (ODD == null || ODD == '') {
		ODD = 0;
	}
    $.getJSON(url, { CompanyId: ODD}, function (response) {
        $("#VehicleId").empty();
        $.each(response, function (index, item) {
            var p = new Option(item.Text, item.Value);
            $("#VehicleId").append(p);
        });
    });
    url = '@Url.Action("Services", "WorkOrder")';
    PDD = $("#ServiceId");
    $.getJSON(url, { CompanyId: ODD }, function (response) {
        $("#ServiceId").empty();
        $.each(response, function (index, item) {
            var p = new Option(item.Text, item.Value);
            $("#ServiceId").append(p);
        });
    });
}

function onServiceChange()
{
	var url = '@Url.Action("GetServiceInfo", "WorkOrder")';

	var ODD = $("#ServiceId").val();

    $.getJSON(url, { ServiceId: ODD}, function (response) {
		$("#ServiceContact").val(response.ServiceContact);
		$("#ContactPhoneNumber").val(response.ContactPhoneNumber);

    });


}

	$(function () {
		$('#Plate').keyup(function () {
			this.value = $.trim(this.value.toUpperCase());
		});

		$('#SerialNo').keyup(function () {
			this.value = $.trim(this.value.toUpperCase());
		});

		$('#PartNo').keyup(function () {
			this.value = $.trim(this.value.toUpperCase());
		});

		$('#VIN').keyup(function () {
			this.value = $.trim(this.value.toUpperCase());
		});
	});
</script>

@Html.Action("SetPageHeader", "Admin", new { pageTitle = "İş Emri Oluştur", pagePermission = "EMP_02" })
<div class="w3-panel">
	<div class="w3-row-padding w3-card">
		@using (Html.BeginForm())
		{

			<div class="w3-row">
				<div class="w3-third w3-padding">
					<label>Firma</label>
					@Html.DropDownList("CompanyId", (SelectList)ViewBag.Companies, "Firma Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "CompanyId", @onchange = "onChangeCompany();" })

				</div>
				<div class="w3-third w3-padding">
					<label>Arac Model</label>
					@Html.DropDownList("VehicleId", Enumerable.Empty<SelectListItem>(), "Marka Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "VehicleId" })  @*(SelectList)ViewBag.Vehicles,*@
				</div>
				<div class="w3-third w3-padding">
					<div class="w3-half" style="padding-right:10px!important;">
						<label>Plaka</label>
						@Html.EditorFor(model => model.Plate, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", autocomplete = "off", maxlength = "36" } })

					</div>
					<div class="w3-half">
						<label>Model Yılı</label>
						@Html.DropDownList("CsModelYear", ViewData["listModelYear"] as List<SelectListItem>, htmlAttributes: new { @class = "w3-select w3-border w3-round" })
					</div>

				</div>

			</div>
			<div class="w3-row">
				<div class="w3-third w3-padding">
					<label>Servis Adı</label>
					@Html.DropDownList("ServiceId", Enumerable.Empty<SelectListItem>(), "Servis Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "ServiceId", autocomplete = "off", @onchange = "onServiceChange();" })   @*(SelectList)ViewBag.Services,*@
				</div>


				<div class="w3-third w3-padding">
					<label>Şase No</label>
					@Html.EditorFor(model => model.VIN, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", autocomplete = "off", maxlength = "24" } })

				</div>
				<div class="w3-third w3-padding">
					<div class="w3-half" style="padding-right:10px!important;">
						<label>Araç Km</label>
						@Html.TextBoxFor(model => model.VehicleKm, new { @class = "w3-input w3-border w3-round onlynumeric", autocomplete = "off", maxlength = "7" })

					</div>
					<div class="w3-half">
						<label>Yakıt Tipi</label>
						@Html.DropDownList("CdFuelType", new List<SelectListItem>
										{
										new SelectListItem{ Text="Yakıt Tipi Seçiniz", Value = "0" },
										new SelectListItem{ Text="Benzin", Value = "1" },
										new SelectListItem{ Text="Dizel", Value = "2" },
										}, htmlAttributes: new { @class = "w3-select w3-border w3-round" })
					</div>
				</div>
			</div>
			<div class="w3-row">
				<div class="w3-third w3-padding">
					<label>Servis Yetkilisi</label>
					@Html.EditorFor(model => model.ServiceContact, new { htmlAttributes = new { @class = "w3-input w3-border w3-round onlylettersTurkish", autocomplete = "off" } })
				</div>
				<div class="w3-third w3-padding">
					<label>Telefon Numarasi</label>
					@Html.EditorFor(model => model.ContactPhoneNumber, new { htmlAttributes = new { @class = "w3-input w3-border w3-round phone", autocomplete = "off" } })
				</div>
				<div class="w3-third w3-padding">
					<label>Gelen Parça</label>
					@Html.DropDownList("TaskId", (SelectList)ViewBag.Tasks, "İş Tipi Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "TasksId", autocomplete = "off" })


				</div>
			</div>

			<div class="w3-row">
				<div class="w3-third w3-padding">
					<div class="w3-half w3-padding-right">
						<label>Seri No</label>
						@Html.TextBoxFor(model => model.SerialNo, new { @class = "w3-input w3-border w3-round", autocomplete = "off", maxlength = "24" }) @*, required = "required"*@
					</div>
					<div class="w3-half">
						<label>Parça No</label>
						@Html.TextBoxFor(model => model.PartNo, new { @class = "w3-input w3-border w3-round", autocomplete = "off", maxlength = "24" }) @*, required = "required"*@
					</div>
				</div>
			</div>
			<div class="w3-row">
				<div class="w3-row w3-padding">
					<table cellspacing="3" cellpadding="3">
						<tbody>
							<tr>
								<td><label>Garanti Kapsamında mı? </label></td>
								<td>
									@Html.CheckBoxFor(model => model.SwWarranty, new { @class = "w3-check" })
								</td>
								<td><label>Revizyon Yapılmış mı? </label></td>
								<td>  @Html.CheckBoxFor(model => model.SwRevision, new { @class = "w3-check" })
								<td><label>İş Tekrarı mı? </label></td>
								<td>  @Html.CheckBoxFor(model => model.SwRepeatWork, new { @class = "w3-check" })
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			<div class="w3-row">
				<div class="w3-padding">
					<label class="w3-text-grey">Şikayet açıklaması ve Müşteri talepleri: </label>
					@Html.TextAreaFor(model => model.ComplaintsCustomerRequests, new { @class = "w3-input w3-border w3-round" })

				</div>
			</div>
			<div class="w3-row w3-margin-bottom">
				<div class="w3-quarter">&nbsp;</div>
				<div class="w3-quarter">&nbsp;</div>
				<div class="w3-quarter">&nbsp;</div>
				<div class="w3-quarter">
					<button class="w3-btn w3-ripple w3-green" id="btnSave">Is Emri Olustur</button>
				</div>
			</div>

		}

	</div>
</div>

