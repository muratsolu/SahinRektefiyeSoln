@model SahinRektefiyeSoln.Models.ViewModels.Stok.ParcaAlternatifPageModel

@{
	Layout = null;
}

<script>
	$(document).ready(function () {
		$.widget("custom.combobox", {
			_create: function () {
				this.wrapper = $("<span>")
					//.addClass("custom-combobox")
					.css({ 'position': 'relative' })
					.css({ 'width': "auto!important" })
					.insertAfter(this.element);

				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},

			_createAutocomplete: function () {
				var selected = this.element.children(":selected"),
					value = selected.val() ? selected.text() : "";

				this.input = $("<input>")
					.appendTo(this.wrapper)
					.val(value)
					.attr("title", "")
					//.addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
					.addClass("w3-select w3-border w3-round w3-padding")
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy(this, "_source")
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});

				this._on(this.input, {
					autocompleteselect: function (event, ui) {
						ui.item.option.selected = true;
						this._trigger("select", event, {
							item: ui.item.option
						});
					},

					autocompletechange: "_removeIfInvalid"
				});
			},

			_createShowAllButton: function () {
				var input = this.input,
					wasOpen = false;

				$("<a>")
					.attr("tabIndex", -1)
					.attr("title", "Tümünü Göster")
					.tooltip()
					.appendTo(this.wrapper)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.css('margin-right', 3)
					.removeClass("ui-button ui-corner-all ui-widget ui-button-icon-only ")
					//.addClass("custom-combobox-toggle ui-corner-right")
					.addClass("w3-display-right")
					.on("mousedown", function () {
						wasOpen = input.autocomplete("widget").is(":visible");
					})
					.on("click", function () {
						input.trigger("focus");

						// Close if already visible
						if (wasOpen) {
							return;
						}

						// Pass empty string as value to search for, displaying all results
						input.autocomplete("search", "");
					});
			},

			_source: function (request, response) {
				var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
				response(this.element.children("option").map(function () {
					var text = $(this).text();
					if (this.value && (!request.term || matcher.test(text)))
						return {
							label: text,
							value: text,
							option: this
						};
				}));
			},

			_removeIfInvalid: function (event, ui) {

				// Selected an item, nothing to do
				if (ui.item) {
					return;
				}

				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children("option").each(function () {
					if ($(this).text().toLowerCase() === valueLowerCase) {
						this.selected = valid = true;
						return false;
					}
				});

				// Found a match, nothing to do
				if (valid) {
					return;
				}

				// Remove invalid value
				this.input
					.val("")
					.attr("title", value + " seçilmedi.")
					.tooltip("open");
				this.element.val("");
				this._delay(function () {
					this.input.tooltip("close").attr("title", "");
				}, 2500);
				this.input.autocomplete("instance").term = "";
			},

			_destroy: function () {
				this.wrapper.remove();
				this.element.show();
			}
		});

		$("#AlternatifStokId").combobox({
			select: function (event, ui) {
				$('#AlternatifStokId').val(ui.item.value);
				$('#AlternatifStokId').trigger("change");
			}
		});

		jQuery.extend(jQuery.fn.dataTableExt.oSort, {
            'locale-compare-asc': function (a, b) {
                return a.localeCompare(b, 'cs', { sensitivity: 'case' })
            },
            'locale-compare-desc': function (a, b) {
                return b.localeCompare(a, 'cs', { sensitivity: 'case' })
            }
        })

        jQuery.fn.dataTable.ext.type.search['locale-compare'] = function (data) {
            return NeutralizeAccent(data);
        }

        function NeutralizeAccent(data) {
            return !data
                ? ''
                : typeof data === 'string'
                    ? data
                        .replace(/\n/g, ' ')
                        .replace(/[éÉěĚèêëÈÊË]/g, 'e')
                        .replace(/[šŠ]/g, 's')
                        .replace(/[čČ]/g, 'c')
                        .replace(/[řŘ]/g, 'r')
                        .replace(/[žŽ]/g, 'z')
                        .replace(/[ýÝ]/g, 'y')
                        .replace(/[áÁâàÂÀ]/g, 'a')
                        .replace(/[íÍîïÎİÏ]/g, 'i')
                        .replace(/[ťŤ]/g, 't')
                        .replace(/[ďĎ]/g, 'd')
                        .replace(/[ňŇ]/g, 'n')
                        .replace(/[óÓ]/g, 'o')
                        .replace(/[úÚůŮ]/g, 'u')
                    : data
        }

		$('#example').DataTable({
			"processing": true,
			"filter": true,
			"language": {
				"sEmptyTable": "Tabloda herhangi bir veri mevcut değil",
				"oPaginate": { "sFirst": "İlk", "sLast": "Son", "sNext": "İleri", "sPrevious": "Geri" },
				"select": { "rows": { "_": "%d kayıt seçildi", "0": "", "1": "1 kayıt seçildi" } },
				"sSearch": "",
				"selectAll": "Tümünü Seç",
				"sSearchPlaceholder": "Filtrele",
				"sLengthMenu": "_MENU_",
				"sLoadingRecords": "Yükleniyor...",
				"sProcessing": "İşleniyor...",
				"sZeroRecords": "Eşleşen kayıt bulunamadı...",
				"sInfo": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar.",
				"sInfoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
				"sInfoEmpty": "Kayıt Yok",
				"sInfoPostFix": "",
				"sInfoThousands": ".",
				"sDecimal": ","
			},
            columnDefs : [
							 { targets: 0, type: 'locale-compare' },
						  ]
        });

		$("input[type='search']").keyup(function () {
            table.search(
                jQuery.fn.dataTable.ext.type.search.string(NeutralizeAccent(this.value))
            )
                .draw()

        });

		$('#btnAlternatifTanimla').click(function () {
			debugger;
			var AlternatifStokId = $('#AlternatifStokId').val();
			var StokKartiId = '@Model.stokKarti.StokKartiId';

			var data = {
				StokKartiId: StokKartiId,
				AlternatifStokId: AlternatifStokId
			};

			console.log("Post : " + data);

			urlParcaEkle = '@Url.Action("ParcaAlternatif", "Stok")';

			$.ajax({
				type: "POST",
				url: urlParcaEkle,
				content: "application/json; charset=utf-8",
				dataType: "json",
				data: data,//JSON.stringify(),
				success: function (d) {
					debugger;
					OnSuccess(d);
				},
				error: function (xhr, textStatus, errorThrown) {
					debugger;
					OnFailure(xhr);
				}
			});

		});
		

		$('.deletedStokAlternatif').click(function () {

			var value = $(this).attr("StokKartiAlternatifId");
			console.log(value);
			
			var urlParcaEkle = '@Url.Action("DeleteStokKartiAlternatifi", "Stok")';

			var data = {
				StokKartiAlternatifId: value
			};
			
			$.ajax({
					type: "POST",
					url: urlParcaEkle,
					content: "application/json; charset=utf-8",
					dataType: "json",
					data: data,//JSON.stringify(),
					success: function (d) {
						if (d.result == 1) {
							toastr.success(data.message, 'Alternatif parça silindi');
								$('#AlternatifModalContent').load('@Url.Action("ParcaAlternatif","Stok", new { StokKartiId = Model.stokKarti.StokKartiId })');


						} else {
							toastr.error(data.message, 'Alternatif parça silinemedi.');
						}
						
					},
					error: function (xhr, textStatus, errorThrown) {
						alert('Error2 \n' + data);// TODO: Show error
					}
				});

			});
	});
	function WaitBlockUI(milisaniye, message) {

		$.blockUI({
			css: {
				border: 'none',
				padding: '15px',
				backgroundColor: '#000',
				'-webkit-border-radius': '10px',
				'-moz-border-radius': '10px',
				opacity: .5,
				color: '#fff'
			},
			message: message
		});

		setTimeout($.unblockUI, milisaniye);

	}
	function OnSuccess(data) {
		$('#AlternatifModalContent').load('@Url.Action("ParcaAlternatif","Stok", new { StokKartiId = Model.stokKarti.StokKartiId })');

		if (data.result ==1 ) {
			toastr.success(data.message, 'İşlem başarılı!');

		}
		else if(data.result != 1){
			toastr.error(data.message, 'Önceden Eklenmiş.');
		}


	}
	function OnFailure(data) {
		$('#AlternatifModalContent').load('@Url.Action("ParcaAlternatif","Stok", new { StokKartiId = Model.stokKarti.StokKartiId })');

		toastr.error(data.message, 'SomeThing went Wrong!');

	}


</script>
<div class="w3-row">
	@Model.stokKarti.ParcaAdi için alternatalternatif parça seç.
</div>
<div class="w3-row">
	

		<input type="hidden" id="StokKartiId" name="StokKartiId" value="@Model.stokKarti.StokKartiId" />
		<div class="w3-threequarter w3-padding">
			<label>Parça </label>
			@Html.DropDownList("AlternatifStokId", (SelectList)ViewBag.SecilebilecekStokKartlari, "Parça Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "AlternatifStokId", required = "required" })
		</div>
		<div class="w3-quarter w3-padding">
			<div class="w3-third w3-padding">
				<br />
				<button class="w3-btn w3-ripple w3-green w3-right" id="btnAlternatifTanimla">Ekle</button>
			</div>
		</div>
	

</div>

<div class="w3-row w3-padding">
	Alternatif Parçalar
	<table id="example">
		<thead>
			<tr>
				<th class="w3-text-center">#</th>
				<td>Parça No</td>
				<th>Parça Adı</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.alternatifStokKartlari)
			{

				<tr>
					<td>
						<button class="w3-btn w3-ripple w3-red w3-right   w3-round deletedStokAlternatif" stokkartiAlternatifId="@item.StokKartiAlternatifId">
							<i class="fa fa-times w3-text-white" aria-hidden="true"></i> Sil
						</button>
					</td>
					<td>
						@item.StokKarti1.ParcaNo
					</td>
					<td>
						<label>@item.StokKarti1.ParcaAdi</label>
					</td>
				</tr>
			}

		</tbody>
	</table>

</div>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>