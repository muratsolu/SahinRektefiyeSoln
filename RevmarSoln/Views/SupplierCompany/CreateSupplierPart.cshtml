@model SahinRektefiyeSoln.Models.SupplierParts
@{
	ViewBag.Title = "Tedarikçi Firma Parça Ekleme";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Styles/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.js"></script>

<style>
	table {
		font-size: 1em;
	}

	.ui-draggable, .ui-droppable {
		background-position: top;
	}
</style>

<script>
	$(document).ready(function () {
		$('#ArrivalDate').datepicker({
			dateFormat: "dd-mm-yy",
			monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
			dayNamesMin: ["Pa", "Pt", "Sl", "Ça", "Pe", "Cu", "Ct"],
			firstDay: 1
		});

		$.widget("custom.combobox", {
			_create: function () {
				this.wrapper = $("<span>")
					//.addClass("custom-combobox")
					.css({ 'position': 'relative' })
					.css({ 'width': "auto!important" })
					.insertAfter(this.element);

				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},

			_createAutocomplete: function () {
				var selected = this.element.children(":selected"),
					value = selected.val() ? selected.text() : "";

				this.input = $("<input>")
					.appendTo(this.wrapper)
					.val(value)
					.attr("title", "")
					//.addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
					.addClass("w3-select w3-border w3-round w3-padding")
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy(this, "_source")
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});

				this._on(this.input, {
					autocompleteselect: function (event, ui) {
						ui.item.option.selected = true;
						this._trigger("select", event, {
							item: ui.item.option
						});
					},

					autocompletechange: "_removeIfInvalid"
				});
			},

			_createShowAllButton: function () {
				var input = this.input,
					wasOpen = false;

				$("<a>")
					.attr("tabIndex", -1)
					.attr("title", "Tümünü Göster")
					.tooltip()
					.appendTo(this.wrapper)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.css('margin-right', 3)
					.removeClass("ui-button ui-corner-all ui-widget ui-button-icon-only ")
					//.addClass("custom-combobox-toggle ui-corner-right")
					.addClass("w3-display-right")
					.on("mousedown", function () {
						wasOpen = input.autocomplete("widget").is(":visible");
					})
					.on("click", function () {
						input.trigger("focus");

						// Close if already visible
						if (wasOpen) {
							return;
						}

						// Pass empty string as value to search for, displaying all results
						input.autocomplete("search", "");
					});
			},

			_source: function (request, response) {
				var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
				response(this.element.children("option").map(function () {
					var text = $(this).text();
					if (this.value && (!request.term || matcher.test(text)))
						return {
							label: text,
							value: text,
							option: this
						};
				}));
			},

			_removeIfInvalid: function (event, ui) {

				// Selected an item, nothing to do
				if (ui.item) {
					return;
				}

				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children("option").each(function () {
					if ($(this).text().toLowerCase() === valueLowerCase) {
						this.selected = valid = true;
						return false;
					}
				});

				// Found a match, nothing to do
				if (valid) {
					return;
				}

				// Remove invalid value
				this.input
					.val("")
					.attr("title", value + " seçilmedi.")
					.tooltip("open");
				this.element.val("");
				this._delay(function () {
					this.input.tooltip("close").attr("title", "");
				}, 2500);
				this.input.autocomplete("instance").term = "";
			},

			_destroy: function () {
				this.wrapper.remove();
				this.element.show();
			}
		});
		
		$("#ServiceId").combobox({
			select: function (event, ui) {
				//console.log(event);
				//console.log(ui.item.value);
				$('#ServiceId').val(ui.item.value);
				$('#ServiceId').trigger("change");
			}
		});
		$("#toggle").on("click", function () {
			$("#ServiceId").toggle();
		});

		$("#VehicleId").combobox({
			select: function (event, ui) {
				//console.log(event);
				//console.log(ui.item.value);
				$('#VehicleId').val(ui.item.value);
				$('#VehicleId').trigger("change");
			}
		});
		$("#toggle").on("click", function () {
			$("#VehicleId").toggle();
		});

		//** Custom AutoComp end **//
		
		if ($('#CompanyId').val() != "") {
			var url = '@Url.Action("Vehicles", "WorkOrder")';
			var PDD = $("#VehicleId");
			//var ODD = '1008'; $('#CompanyId').val('1008');// Fiat Test ID'si
			var ODD = '1007'; $('#CompanyId').val('1007');// Production Fiat ID

			$.getJSON(url, { CompanyId: ODD, selectedId: @(ViewBag.VehicleId == null ? @"0" : ViewBag.VehicleId )}, function (response) {
				$("#VehicleId").empty();
				$.each(response, function (index, item) {
					var p = new Option(item.Text, item.Value,item.Selected);
					$("#VehicleId").append(p);
					if (item.Selected == true) {
						$("#VehicleId").val(@(ViewBag.VehicleId == null ? @"0" : ViewBag.VehicleId )).attr('selected', 'selected');
					}

				});
			});
			url = '@Url.Action("Services", "WorkOrder")';
			PDD = $("#ServiceId");
			$.getJSON(url, { CompanyId: ODD, selectedId: @(ViewBag.ServiceId == null ? @"0" : ViewBag.ServiceId ) }, function (response) {
				$("#ServiceId").empty();
				$.each(response, function (index, item) {
					var p = new Option(item.Text, item.Value, item.Selected);
					$("#ServiceId").append(p);
					if (item.Selected == true) {
						$("#ServiceId").val(@(ViewBag.ServiceId == null ? @"0" : ViewBag.ServiceId )).attr('selected', 'selected');
					}
				});
			});

		};

		
		var RevizyonSonucu = $('#PartReviewResultId').val();


		if (RevizyonSonucu == '1' || RevizyonSonucu == '4') {
			$('#RezisyonWarning').removeClass('w3-hide').addClass('w3-show');
			$('#RevizyonSonrasi').removeClass('w3-show').addClass('w3-hide');
		} else {
			$('#RezisyonWarning').removeClass('w3-show').addClass('w3-hide');
			$('#RevizyonSonrasi').removeClass('w3-hide').addClass('w3-show');
		}
		if (RevizyonSonucu == '4') { // Hurda ise Revizyon tipi alanı gözükmeyecek.
			$('#divRevisionType').removeClass('w3-show').addClass('w3-hide');
		}

		$('#PartReviewResultId').change(function () {
			var RevizyonSonucu = $('#PartReviewResultId').val();

			if (RevizyonSonucu == '1' || RevizyonSonucu == '4') {
				$('#RezisyonWarning').removeClass('w3-hide').addClass('w3-show');
				$('#RevizyonSonrasi').removeClass('w3-show').addClass('w3-hide');
			} else {
				$('#RezisyonWarning').removeClass('w3-show').addClass('w3-hide');
				$('#RevizyonSonrasi').removeClass('w3-hide').addClass('w3-show');
			}

			if (RevizyonSonucu == '4') { // Hurda ise Revizyon tipi alanı gözükmeyecek.
				$('#divRevisionType').removeClass('w3-show').addClass('w3-hide');
			} else {
				$('#divRevisionType').removeClass('w3-hide').addClass('w3-show');
			}
		});
	});
	function onChangeCompany()
	{
		var url = '@Url.Action("Vehicles", "WorkOrder")';
		var PDD = $("#VehicleId");
		var ODD = $("#CompanyId").val();

		$.getJSON(url, { CompanyId: ODD , selectedId : null}, function (response) {
			$("#VehicleId").empty();
			$.each(response, function (index, item) {
				var p = new Option(item.Text, item.Value);
				$("#VehicleId").append(p);
			});
		});
		url = '@Url.Action("Services", "WorkOrder")';
		PDD = $("#ServiceId");
		$.getJSON(url, { CompanyId: ODD }, function (response) {
			$("#ServiceId").empty();
			$.each(response, function (index, item) {
				var p = new Option(item.Text, item.Value);
				$("#ServiceId").append(p);
			});
		});
	}

</script>
@Html.Action("SetPageHeader", "Admin", new { pageTitle = "Tedarikçi Firma Parça Ekleme", pagePermission = "SUPMN_01" })

<div class="w3-panel">
	<div class="w3-row-padding w3-card">
		@using (Html.BeginForm())
		{
			@Html.AntiForgeryToken()

		<div class="w3-row">
			<h4>Sevkiyat Bilgileri</h4>
			<div class="w3-third w3-padding">
				<label>Giriş Tarihi </label>
				@Html.EditorFor(model => model.ArrivalDate, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off", id = "ArrivalDate" } })
			</div>
			<div class="w3-third w3-padding">
				<label>Parti Numarası</label>
				@Html.EditorFor(model => model.ShipmentNumber, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
			</div>
			<div class="w3-third w3-padding">
				<label>Kleym Numarası </label>
				@Html.EditorFor(model => model.KleymNumber, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
			</div>
			<div class="w3-third w3-padding">
				<label>Tedarikçi Merkezi </label>
				@Html.DropDownList("SupplierCompanyId", (SelectList)ViewBag.SupplierCompanies, htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "SupplierCompanyId" })
			</div>
			<div class="w3-third w3-padding">
				<label>Revizyon Takip Numarası</label>
				@Html.EditorFor(model => model.RevisionTrackNumber, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
			</div>
		</div>
		<div class="w3-row">
			<div class="w3-third w3-padding">
				<label>Parça İnceleme Sonucu </label>
				@Html.DropDownList("PartReviewResultId", (SelectList)ViewBag.PartReviewResults, htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "PartReviewResultId" })
			</div>
			<div class="w3-third w3-padding">
				<label>Parça Cinsi </label>
				@Html.DropDownList("PartReviewTypeId", (SelectList)ViewBag.PartReviewTypes, htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "PartReviewTypeId" })
			</div>
			<div class="w3-third w3-padding" id="divRevisionType">
				<label>Revizyon Tipi </label>
				@Html.DropDownList("RevisionTypeId", (SelectList)ViewBag.RevisionTypes, "Revizyon Tipi Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "RevisionTypeId" })
			</div>
			
		</div>
			<div class="w3-row">
				<div class="w3-third w3-padding">
					<label>Marka </label>
					@Html.DropDownList("CompanyId", (SelectList)ViewBag.Companies, htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "CompanyId", @onchange = "onChangeCompany();" })
				</div>
				<div class="w3-third w3-padding">
					<label>Model</label>
					@Html.DropDownList("VehicleId", Enumerable.Empty<SelectListItem>(), "Model Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "VehicleId" })
				</div>
				<div class="w3-third w3-padding">
					<label>Parça Numarası </label>
					@Html.EditorFor(model => model.PartNumber, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
				</div>
			</div>
			<div class="w3-row w3-padding">
				<label>Revmer Açıklama </label>
				@Html.TextAreaFor(model => model.RevmerPartDesc, new { @class = "w3-input w3-border w3-round", autocomplete = "off", maxlength = "1024" })

			</div>
			<hr>
			<div class="w3-row">
				<h4>Revizyon Sonrası Takip</h4>
				<div class="w3-panel w3-pale-blue w3-leftbar w3-rightbar w3-border-blue w3-show" id="RezisyonWarning">
					<p>
						Bayi iade ve Hurda sonuçlarında revizyon sonrası alanlar doldurulmamaktadır.
					</p>
				</div>
				<div id="RevizyonSonrasi">
					
					
					<div class="w3-third w3-padding">
						<label>Gönderilecek Bayi</label>
						@Html.DropDownList("ServiceId", Enumerable.Empty<SelectListItem>(), "Servis Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "ServiceId" })
					</div>
					<div class="w3-third w3-padding">
						<label>Araç Km</label>
						@Html.EditorFor(model => model.VehicleKm, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
					</div>
					<div class="w3-third w3-padding">
						<label>Şase Numarası</label>
						@Html.EditorFor(model => model.VIN, new { htmlAttributes = new { @class = "w3-input w3-border w3-round", maxlength = "50", autocomplete = "off" } })
					</div>
				</div>
			</div>
			<div class="w3-row">
				<div class="w3-quarter">&nbsp;</div>
				<div class="w3-quarter">&nbsp;</div>
				<div class="w3-quarter w3-padding">

				</div>
				<div class="w3-quarter  w3-padding">
					<button class="w3-btn w3-ripple w3-green w3-right">Ekle</button>
				</div>
			</div>
		}
	</div>
</div>
