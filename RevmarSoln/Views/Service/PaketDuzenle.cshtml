@model SahinRektefiyeSoln.Models.ViewModels.Services.PaketDuzenlePageModel
@{
	ViewBag.Title = "PaketDuzenle";
	Layout = "~/Views/Shared/_Layout.cshtml";
	double toplamFiyat = 0;
	double toplamIscilikFiyat = 0;
}

@using Vereyon.Web;
@Html.Action("SetPageHeader", "Admin", new { pageTitle = "Paket Düzenle Ekranı", pagePermission = "XXXXX" })
<link href="~/Styles/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-ui.js"></script>
<script>
	$(document).ready(function () {
		$.widget("custom.combobox", {
			_create: function () {
				this.wrapper = $("<span>")
					//.addClass("custom-combobox")
					.css({ 'position': 'relative' })
					.css({ 'width': "auto!important" })
					.insertAfter(this.element);

				this.element.hide();
				this._createAutocomplete();
				this._createShowAllButton();
			},

			_createAutocomplete: function () {
				var selected = this.element.children(":selected"),
					value = selected.val() ? selected.text() : "";

				this.input = $("<input>")
					.appendTo(this.wrapper)
					.val(value)
					.attr("title", "")
					//.addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
					.addClass("w3-select w3-border w3-round w3-padding")
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: $.proxy(this, "_source")
					})
					.tooltip({
						classes: {
							"ui-tooltip": "ui-state-highlight"
						}
					});

				if (this.bindings[0].getAttribute("required") == "required") {
					this.input.attr("required", "required");
				}

				this._on(this.input, {
					autocompleteselect: function (event, ui) {
						ui.item.option.selected = true;
						this._trigger("select", event, {
							item: ui.item.option
						});
					},

					autocompletechange: "_removeIfInvalid"
				});
			},

			_createShowAllButton: function () {
				var input = this.input,
					wasOpen = false;

				$("<a>")
					.attr("tabIndex", -1)
					.attr("title", "Tümünü Göster")
					.tooltip()
					.appendTo(this.wrapper)
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.css('margin-right', 3)
					.removeClass("ui-button ui-corner-all ui-widget ui-button-icon-only ")
					//.addClass("custom-combobox-toggle ui-corner-right")
					.addClass("w3-display-right")
					.on("mousedown", function () {
						wasOpen = input.autocomplete("widget").is(":visible");
					})
					.on("click", function () {
						input.trigger("focus");

						// Close if already visible
						if (wasOpen) {
							return;
						}

						// Pass empty string as value to search for, displaying all results
						input.autocomplete("search", "");
					});
			},

			_source: function (request, response) {
				var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
				var i = 0;
				response(this.element.children("option").map(function () {
					var text = $(this).text();
					if (this.value && (!request.term || matcher.test(text))) {
						i += 1;
						if (i <= 5) {
							return {
								label: text,
								value: text,
								option: this
							};
						}

					}

				}));
			},

			_removeIfInvalid: function (event, ui) {

				// Selected an item, nothing to do
				if (ui.item) {
					return;
				}

				// Search for a match (case-insensitive)
				var value = this.input.val(),
					valueLowerCase = value.toLowerCase(),
					valid = false;
				this.element.children("option").each(function () {
					if ($(this).text().toLowerCase() === valueLowerCase) {
						this.selected = valid = true;
						return false;
					}
				});

				// Found a match, nothing to do
				if (valid) {
					return;
				}

				// Remove invalid value
				this.input
					.val("")
					.attr("title", value + " seçilmedi.")
					.tooltip("open");
				this.element.val("");
				this._delay(function () {
					this.input.tooltip("close").attr("title", "");
				}, 2500);
				this.input.autocomplete("instance").term = "";
			},

			_destroy: function () {
				this.wrapper.remove();
				this.element.show();
			}
		});

		$("#StokKartId").combobox({
			select: function (event, ui) {
				$('#StokKartId').val(ui.item.value);
				$('#StokKartId').trigger("change");
			}
		});

		$("#IscilikId").combobox({
			select: function (event, ui) {
				$('#IscilikId').val(ui.item.value);
				$('#IscilikId').trigger("change");
			}
		});


	});
</script>
<div class="w3-panel">
	<div class="w3-row-padding w3-card">
		<div class="w3-row w3-row-padding  w3-margin-top">
			@Html.RenderFlashMessages()
		</div>
		<div class="w3-row">
			@using (Html.BeginForm("PaketDuzenle", "Service", FormMethod.Post))
			{
				@Html.HiddenFor(x => x.paket.PaketId)
				<div class="w3-quarter w3-padding">
					<label>Paket Adı</label>
					@Html.EditorFor(model => model.paket.PaketAdi, new { htmlAttributes = new { @class = "w3-input w3-border w3-round ", @required = "required", autocomplete = "off", maxlength = "126" } })
				</div>
				<div class="w3-quarter w3-padding">
					<label>Marka</label>
					@Html.DropDownList("CompanyId", (SelectList)ViewBag.Companies, "Marka Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "CompanyId", required = "required" })
				</div>
				<div class="w3-quarter w3-padding w3-left">
					<br />
					<button type="submit" class="w3-green w3-btn w3-round w3-left">Paket Başlığını ve Markasını Güncelle</button>
				</div>
			}
		</div>
		<div class="w3-row">
			<div class="w3-half">
				@using (Html.BeginForm("PaketStokKartEkle", "Service", FormMethod.Post))
				{
					@Html.HiddenFor(x => x.paket.PaketId)
					<div class="w3-third w3-padding">
						<label>Parça Adı</label>
						@Html.DropDownList("StokKartId", (SelectList)ViewBag.StokKartlari, "Parça Adı Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "StokKartId", required = "required" })
					</div>
					<div class="w3-third w3-padding">

						<label>Parça Adeti</label>
						@Html.EditorFor(model => model.StokKartiAdedi, new { htmlAttributes = new { @class = "w3-input w3-border w3-round numeric", autocomplete = "off", required = "required" } })


					</div>
					<div class="w3-third w3-padding">
						<br />
						<button type="submit" class=" w3-green w3-btn w3-left w3-round w3-left w3-block">Ekle</button>
					</div>
				}
			</div>
			<div class="w3-half">
				<div class="w3-row">
					@using (Html.BeginForm("PaketIscilikEkle", "Service", FormMethod.Post))
					{
						@Html.HiddenFor(x => x.paket.PaketId)
						<div class="w3-twothird w3-padding">
							<label>İşçilik Adı</label>
							@Html.DropDownList("IscilikId", (SelectList)ViewBag.Iscilikler, "İşçilik Seçiniz", htmlAttributes: new { @class = "w3-select w3-border w3-round", @Id = "IscilikId", required = "required" })
						</div>
						<div class="w3-third w3-padding">
							<br />
							<button type="submit" class=" w3-green w3-btn w3-left w3-round w3-left w3-block">Ekle</button>
						</div>
					}
				</div>
			</div>
		</div>
		<div class="w3-row">
			<div class="w3-half w3-padding">
				<h4>Paket içerisindeki parçalar</h4>
				<table class="w3-table-all w3-hoverable w3-margin-top w3-margin-bottom w3-small">
					<thead>
						<tr>
							<th></th>
							<th>Parça No </th>
							<th>Parça Adı</th>
							<th>Fiyatı</th>
							<th>Adet</th>
							<th>Ekleyen</th>
							<th>Eklenme Tarihi</th>
						</tr>
					</thead>
					<tbody>
						@if (Model.paket.PaketStokKartlari != null)
						{
							if (Model.paket.PaketStokKartlari.Count > 0)
							{
								foreach (var stokKart in Model.paket.PaketStokKartlari)
								{
									<tr>
										<td>
											<a href="/Service/PakettenStokKartiCikar?PaketStokKartId=@stokKart.PaketStokKartId" title="Paketten Parça'yı Çıkartmak İçin Tıklayın" class="w3-text-red "><i class="fa fa-times-circle-o w3-hover-opacity" aria-hidden="true"></i></a>
										</td>
										<td>@stokKart.StokKarti.ParcaNo</td>
										<td>@stokKart.StokKarti.ParcaAdi</td>
										<td>@stokKart.StokKarti.SatisBirimFiyati</td>
										<td>@stokKart.Adet</td>
										<td>@stokKart.Creator</td>
										<td>@stokKart.CreatedDate.ToShortDateString()</td>
										@{toplamFiyat += (double)stokKart.Adet * (double)stokKart.StokKarti.SatisBirimFiyati;}
									</tr>
								}

							}
							else
							{
								<tr>
									<td colspan="7" class="w3-center"><b><label class="w3-text-red">Paket içerisinde parça bulunmamaktadır</label></b></td>
								</tr>

							}
						}
						else
						{
							<tr>
								<td colspan="7" class="w3-center"><b><label class="w3-text-red">Paket içerisinde parça bulunmamaktadır</label></b></td>
							</tr>
						}
					</tbody>
					@if (Model.paket.PaketStokKartlari != null)
					{
						if (Model.paket.PaketStokKartlari.Count > 0)
						{
							<tfoot>
								<tr>
									<td colspan="7">Toplam Fiyat : @toplamFiyat ₺</td>
								</tr>
							</tfoot>
						}
					}
				</table>

			</div>

			<div class="w3-half w3-padding">
				<h4>Paket içerisindeki işçilikler</h4>
				<table class="w3-table-all w3-hoverable w3-margin-top w3-margin-bottom w3-small">
					<thead>
						<tr>
							<th></th>
							<th>İşçilik Kodu</th>
							<th>İşçilik Adı</th>
							<th>Birim Saati</th>
							<th>Birim Saat Fiyatı</th>
							<th>İşçilik Tipi</th>
							<th>Ekleyen</th>
							<th>Eklenme Tarihi</th>
						</tr>
					</thead>
					<tbody>
						@if (Model.paket.PaketIscilikleri != null)
						{
							if (Model.paket.PaketIscilikleri.Count > 0)
							{
								foreach (var paketIscilik in Model.paket.PaketIscilikleri)
								{
									<tr>
										<td>
											<a href="/Service/PakettenIscilikCikar?PaketIscilikId=@paketIscilik.PaketIscilikId" title="Paketten Parça'yı Çıkartmak İçin Tıklayın" class="w3-text-red "><i class="fa fa-times-circle-o w3-hover-opacity" aria-hidden="true"></i></a>
										</td>
										<td>@paketIscilik.Iscilikler.IscilikKodu</td>
										<td>@paketIscilik.Iscilikler.IscilikAdi</td>
										<td>@paketIscilik.Iscilikler.BirimSaat</td>
										<td>@paketIscilik.Iscilikler.IscilikTipleri.Fiyat</td>
										<td>@paketIscilik.Iscilikler.IscilikTipleri.Aciklamasi</td>
										<td>@paketIscilik.Creator</td>
										<td>@paketIscilik.CreatedDate.ToShortDateString()</td>
										@{toplamIscilikFiyat += (double)paketIscilik.Iscilikler.BirimSaat * (double)paketIscilik.Iscilikler.IscilikTipleri.Fiyat;}
									</tr>
								}
							}
							else
							{
								<tr>
									<td colspan="8" class="w3-center"><b><label class="w3-text-red">Paket içerisinde işçilik bulunmamaktadır</label></b></td>
								</tr>
							}
						}
						else
						{
							<tr>
								<td colspan="8" class="w3-center"><b><label class="w3-text-red">Paket içerisinde işçilik bulunmamaktadır</label></b></td>
							</tr>
						}

					</tbody>
					@if (Model.paket.PaketIscilikleri != null)
					{
						if (Model.paket.PaketIscilikleri.Count > 0)
						{
							<tfoot>
								<tr>
									<td colspan="8">Toplam Fiyat : @toplamIscilikFiyat ₺</td>
								</tr>
							</tfoot>
						}
					}
				</table>

			</div>
		</div>
		<div class="w3-row w3-margin">
			<div class="w3-quarter">
				<a href="/Service/Paketler" class="w3-btn w3-ripple w3-blue"><i class="fa fa-arrow-left"></i>&nbsp;Geri </a>
			</div>
		</div>

	</div>
</div>
